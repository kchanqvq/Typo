#+TITLE: Typo - A portable type inference library for Common Lisp
#+AUTHOR: Marco Heisig

* Notable Features

** Blazingly fast (approximate) handling of types
TODO

** Handles almost all functions in the Common Lisp package
TODO

** Extensible
TODO

* Bonus Features

** Function Specialization
The cool thing about Typo is that it can (portably!) convert s-expressions
to the most applicable specialized version applicable to its target types.
For example, it can replace

#+BEGIN_SRC lisp
(cl:+ a b c)
#+END_SRC

where a is an integer, b is a double-float, and c is a single-float with

#+BEGIN_SRC lisp
(two-arg-f64+ (two-arg-f64+ (f64-from-integer a) b) (f64-from-f32 c))
#+END_SRC

** Automatic differentiation
TODO

* FAQ
** What's the difference betwen NTYPE from this implementation and https://github.com/s-expressionists/ctype?

CTYPE is a full-fledged, precise implementation of CL types, with its own
versions of typep and subtypep. It requires some amount of implementation
specific hooks to be useful.

NTYPE is only does approximate reasoning about types, but is really fast
and doesn't cons. It relies on the host's versions of typep and subtypep to
do the heavy lifting. But it is faster (which matters for Petalisp), and
fully portable. The main goal of NTYPE is not to narrow down the type of
each value in a program enough to choose a specialized representation.

So the main difference between NTYPE and CTYPE is that the former is mostly
about fast type inference and not so much about answering type queries.
